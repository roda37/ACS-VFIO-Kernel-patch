diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index 0369fb6..c7609f6 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -4135,6 +4135,106 @@
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_CHELSIO, PCI_ANY_ID,
 			 quirk_chelsio_T5_disable_root_port_attributes);
 
+static bool acs_on_downstream;
+static bool acs_on_multifunction;
+
+#define NUM_ACS_IDS 16
+struct acs_on_id {
+	      unsigned short vendor;
+			 	unsigned short device;
+};
+static struct acs_on_id acs_on_ids[NUM_ACS_IDS];
+static u8 max_acs_id;
+
+static __init int pcie_acs_override_setup(char *p)
+{
+			 	if (!p)
+			 		return -EINVAL;
+
+			 	while (*p) {
+			 		if (!strncmp(p, "downstream", 10))
+			 			acs_on_downstream = true;
+			 		if (!strncmp(p, "multifunction", 13))
+			 			acs_on_multifunction = true;
+			 		if (!strncmp(p, "id:", 3)) {
+			 			char opt[5];
+			 			int ret;
+			 			long val;
+
+			 			if (max_acs_id >= NUM_ACS_IDS - 1) {
+			 				pr_warn("Out of PCIe ACS override slots (%d)\n",
+			 						NUM_ACS_IDS);
+			 				goto next;
+			 			}
+
+			 			p += 3;
+			 			snprintf(opt, 5, "%s", p);
+			 			ret = kstrtol(opt, 16, &val);
+			 			if (ret) {
+			 				pr_warn("PCIe ACS ID parse error %d\n", ret);
+			 				goto next;
+			 			}
+			 			acs_on_ids[max_acs_id].vendor = val;
+			 		p += strcspn(p, ":");
+			 		if (*p != ':') {
+			 			pr_warn("PCIe ACS invalid ID\n");
+			 			goto next;
+			 			}
+
+			 			p++;
+			 			snprintf(opt, 5, "%s", p);
+			 			ret = kstrtol(opt, 16, &val);
+			 			if (ret) {
+			 				pr_warn("PCIe ACS ID parse error %d\n", ret);
+			 				goto next;
+			 			}
+			 			acs_on_ids[max_acs_id].device = val;
+			 			max_acs_id++;
+			 		}
+			 next:
+			 		p += strcspn(p, ",");
+			 		if (*p == ',')
+			 			p++;
+			 	}
+
+			 	if (acs_on_downstream || acs_on_multifunction || max_acs_id)
+			 		pr_warn("Warning: PCIe ACS overrides enabled; This may allow non-IOMMU protected peer-to-peer DMA\n");
+
+			 	return 0;
+			 }
+			 early_param("pcie_acs_override", pcie_acs_override_setup);
+
+			 static int pcie_acs_overrides(struct pci_dev *dev, u16 acs_flags)
+			 {
+			 	int i;
+
+			 	/* Never override ACS for legacy devices or devices with ACS caps */
+			 	if (!pci_is_pcie(dev) ||
+			 		pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ACS))
+			 			return -ENOTTY;
+
+			 	for (i = 0; i < max_acs_id; i++)
+			 		if (acs_on_ids[i].vendor == dev->vendor &&
+			 			acs_on_ids[i].device == dev->device)
+			 				return 1;
+
+			 switch (pci_pcie_type(dev)) {
+			 	case PCI_EXP_TYPE_DOWNSTREAM:
+			 	case PCI_EXP_TYPE_ROOT_PORT:
+			 		if (acs_on_downstream)
+			 			return 1;
+			 		break;
+			 	case PCI_EXP_TYPE_ENDPOINT:
+			 	case PCI_EXP_TYPE_UPSTREAM:
+			 	case PCI_EXP_TYPE_LEG_END:
+			 	case PCI_EXP_TYPE_RC_END:
+			 		if (acs_on_multifunction && dev->multifunction)
+			 			return 1;
+			 	}
+
+			 	return -ENOTTY;
+}
+
 /*
  * AMD has indicated that the devices below do not support peer-to-peer
  * in any system where they are found in the southbridge with an AMD
@@ -4343,6 +4443,7 @@
 	{ PCI_VENDOR_ID_ATI, 0x439d, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_ATI, 0x4384, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_ATI, 0x4399, pci_quirk_amd_sb_acs },
+	{ PCI_ANY_ID, PCI_ANY_ID, pcie_acs_overrides },
 	{ PCI_VENDOR_ID_AMD, 0x780f, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_AMD, 0x7809, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_SOLARFLARE, 0x0903, pci_quirk_mf_endpoint_acs },
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 766f5779db92..dc19079dad1b 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -52,6 +52,9 @@ unsigned int pci_pm_d3_delay;
 
 static void pci_pme_list_scan(struct work_struct *work);
 
+static void pci_dev_save_and_disable(struct pci_dev *dev);
+static void pci_dev_restore(struct pci_dev *dev);
+
 static LIST_HEAD(pci_pme_list);
 static DEFINE_MUTEX(pci_pme_list_mutex);
 static DECLARE_DELAYED_WORK(pci_pme_work, pci_pme_list_scan);
@@ -1379,15 +1382,7 @@ static void pci_restore_config_space(struct pci_dev *pdev)
 		pci_restore_config_space_range(pdev, 4, 9, 10, false);
 		pci_restore_config_space_range(pdev, 0, 3, 0, false);
 	} else if (pdev->hdr_type == PCI_HEADER_TYPE_BRIDGE) {
-		pci_restore_config_space_range(pdev, 12, 15, 0, false);
-
-		/*
-		 * Force rewriting of prefetch registers to avoid S3 resume
-		 * issues on Intel PCI bridges that occur when these
-		 * registers are not explicitly written.
-		 */
-		pci_restore_config_space_range(pdev, 9, 11, 0, true);
-		pci_restore_config_space_range(pdev, 0, 8, 0, false);
+		pci_restore_config_space_range(pdev, 0, 15, 0, true);
 	} else {
 		pci_restore_config_space_range(pdev, 0, 15, 0, false);
 	}
@@ -4636,6 +4631,8 @@ void pci_reset_secondary_bus(struct pci_dev *dev)
 {
 	u16 ctrl;
 
+	pci_dev_save_and_disable(dev);
+
 	pci_read_config_word(dev, PCI_BRIDGE_CONTROL, &ctrl);
 	ctrl |= PCI_BRIDGE_CTL_BUS_RESET;
 	pci_write_config_word(dev, PCI_BRIDGE_CONTROL, ctrl);
@@ -4649,6 +4646,8 @@ void pci_reset_secondary_bus(struct pci_dev *dev)
 	ctrl &= ~PCI_BRIDGE_CTL_BUS_RESET;
 	pci_write_config_word(dev, PCI_BRIDGE_CONTROL, ctrl);
 
+	pci_dev_restore(dev);
+
 	/*
 	 * Trhfa for conventional PCI is 2^25 clock cycles.
 	 * Assuming a minimum 33MHz clock this results in a 1s
	 --- a/drivers/vfio/pci/vfio_pci_core.c
	 --- a/drivers/vfio/pci/vfio_pci_core.c
From 426deb5b6fd14121244570bfd59e7c6af149ce96 Mon Sep 17 00:00:00 2001
From: joe <joe@mail.com>
Date: Mon, 31 Jul 2023 23:21:44 +0200
Subject: [PATCH] fix

---
 drivers/vfio/pci/vfio_pci_core.c | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/drivers/vfio/pci/vfio_pci_core.c b/drivers/vfio/pci/vfio_pci_core.c
index 20d7b69ea6ff..f3271c3949a7 100644
--- a/drivers/vfio/pci/vfio_pci_core.c
+++ b/drivers/vfio/pci/vfio_pci_core.c
@@ -10,7 +10,6 @@
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
-#include <linux/aperture.h>
 #include <linux/device.h>
 #include <linux/eventfd.h>
 #include <linux/file.h>
@@ -2104,10 +2103,6 @@ static int vfio_pci_vga_init(struct vfio_pci_core_device *vdev)
 	if (!vfio_pci_is_vga(pdev))
 		return 0;
 
-	ret = aperture_remove_conflicting_pci_devices(pdev, vdev->vdev.ops->name);
-	if (ret)
-		return ret;
-
 	ret = vga_client_register(pdev, vfio_pci_set_decode);
 	if (ret)
 		return ret;
-- 
2.41.0
